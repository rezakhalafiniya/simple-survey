<?php

namespace App\Exceptions;

use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of exception types with their corresponding custom log levels.
     *
     * @var array<class-string<\Throwable>, \Psr\Log\LogLevel::*>
     */
    protected $levels = [
        //
    ];

    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<\Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        $api = strpos($request->url(), '/api') !== false;
        if ($e instanceof ModelNotFoundException && $api) {

            return response()->json([
                'message' => 'Record not found',
            ], Response::HTTP_NOT_FOUND);

        }
        if ($api){
            if($e instanceof NotFoundHttpException ){
                return response()->json([
                                     'message' => 'requested url is not found',
                                 ], Response::HTTP_NOT_FOUND);
            }else{
                return response()->json([
                    'message' => $e->getMessage()
                                        ],Response::HTTP_INTERNAL_SERVER_ERROR);
            }
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }
}
